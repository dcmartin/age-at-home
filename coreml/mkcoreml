#!/bin/csh -fb

if ($?DIGITS == 0) setenv DIGITS "192.168.1.31:5001"

if ($#argv) then
  set id = "$argv[1]"
else
  set id = "20170831-164406-066b"
endif

set model = ( `/usr/bin/curl -s -q -f -L "http://$DIGITS/models/$id.json" | jq '.'` )
if ($?model) then
  set dsid = ( `echo "$model" | jq -r '.dataset_id'` )
else
  echo "No such model ($id)"
  exit
endif
set dataset = ( `/usr/bin/curl "http://$DIGITS/datasets/$dsid.json" | jq '.'` )

set output = "$id.py"

set out = "$id.tar.gz"
if (! -s "$out") then
  /usr/bin/curl -s -q -f -L "http://$DIGITS/models/$id/download" -o "$out"
  if (-s "$out") then
    if (! -d "$id") then
      mkdir "$id"
      pushd "$id"
      /usr/local/bin/tar xzvf ../$out
      popd
    endif
  endif
endif

if (! -d "$id") then
  echo "No such model ($id)"
  exit
endif

# process directory

set info = "$id/info.json"

if (! -s "$info") then
  echo "No Caffe model info ($info)"
  exit
endif

#{
#  "caffe flavor": "NVIDIA",
#  "caffe version": "0.15.14",
#  "creation time": "2017-05-06 21:05:56.620160",
#  "dataset_id": "20170505-171925-aace",
#  "deploy file": "deploy.prototxt",
#  "digits version": "5.1-dev",
#  "framework": "caffe",
#  "id": "20170506-210556-d632",
#  "image dimensions": [
#    480,
#    640,
#    3
#  ],
#  "image resize mode": "squash",
#  "job id": "20170506-210556-d632",
#  "labels file": "labels.txt",
#  "mean file": "mean.binaryproto",
#  "model file": "original.prototxt",
#  "name": "rough-fog-frame-bvlc",
#  "snapshot file": "snapshot_iter_1590.caffemodel",
#  "solver file": "solver.prototxt",
#  "status": "Done",
#  "train_val file": "train_val.prototxt",
#  "username": "dcmartin"
#}

set info = ( `/usr/local/bin/jq '.' "$info"` )

# verify identification information
set mid = ( `/bin/echo "$info" | /usr/local/bin/jq -r '.id'` )
if ("$mid" != "$id") then
  echo "Model identifiers do not match ($id specified; $mid in $info"
  exit
endif

#
# base components
#

set name = ( `/bin/echo "$info" | /usr/local/bin/jq -r '.name'` )
set username = ( `/bin/echo "$info" | /usr/local/bin/jq -r '.username'` )
set framework = ( `/bin/echo "$info" | /usr/local/bin/jq -r '.framework'` )
set flavor = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."caffe flavor"'` )
set version = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."caffe version"'` )

#
# author & license
#

if ($?USER) then
  set author = "$USER"
else
  set author = "$username"
endif
# license
set license = "BSD"

#
# image specific
#

set dimensions = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."image dimensions"[]'` )
if ($#dimensions != 3) then
  echo "Invalid 'image dimensions' ($dimensions)"
  exit
endif
# get input size
set height = $dimensions[1]
set width = $dimensions[2]

# and image type
set type = "$dimensions[3]"
switch ("$type")
  case "3":
    set type = "JPEG"
    breaksw
  case "0":
  case "1":
  case "2":
  default:
    echo "Unknown image type ($type)"
    exit
endsw

set resize = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."image resize mode"'` )
set mean = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."mean file"'` )

set labels = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."labels file"'` )
set deploy = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."deploy file"'` )
set model = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."model file"'` )
set snapshot = ( `/bin/echo "$info" | /usr/local/bin/jq -r '."snapshot file"'` )

# check labels
if (! -e "$id/$labels") then
  echo "Please define predicted_feature_name: $labels cannot be found"
  exit
else
  set labels = "$id/$labels"
endif

# check deploy
if (! -e "$id/$deploy") then
  echo "Please define deploy: $deploy cannot be found"
  exit
else
  set deploy = "$id/$deploy"
endif

# check snapshot
if (! -e "$id/$snapshot") then
  echo "Please define snapshot: $snapshot cannot be found"
  exit
else
  set snapshot = "$id/$snapshot"
endif

# Convert a caffe model to a classifier in Core ML
if (-e "$id.py") then
  echo "Removing old $id.py"
  rm -f "$id.py"
endif

/bin/echo '# Copyright (c) 2017, IBM, Inc. All rights reserved.' >! "$id.py"

/bin/echo 'import coremltools' >> "$id.py"
/bin/echo 'coreml_model = coremltools.converters.caffe.convert(("'"$snapshot"'", "'"$deploy"'"), predicted_feature_name="'"$labels"'")' >> "$id.py"
/bin/echo 'coreml_model.author = "'"$author"'"' >> "$id.py"
/bin/echo 'coreml_model.license = "'"$license"'"' >> "$id.py"
/bin/echo 'coreml_model.short_description = '"'""$info""'" >> "$id.py"
/bin/echo 'coreml_model.input_description["image"] = "image identifier"' >> "$id.py"
/bin/echo 'coreml_model.input_description["images"] = "array of image identifiers"' >> "$id.py"
/bin/echo 'coreml_model.input_description["width"] = "'"$width"'"' >> "$id.py"
/bin/echo 'coreml_model.input_description["height"] = "'"$height"'"' >> "$id.py"
/bin/echo 'coreml_model.input_description["type"] = "'"$type"'"' >> "$id.py"
/bin/echo 'coreml_model.output_description["class"] = "Classification;enumerated;'"$labels"'"' >> "$id.py"
/bin/echo 'coreml_model.output_description["score"] = "Score;float;[0.0000,1.0000)"' >> "$id.py"

# Now save the model
/bin/echo 'coreml_model.save("'"$name"'")' >> "$id.py"

echo "DONE: $id.py" >&! /dev/stderr

cat "$id.py"

python "$id.py"

# Load the model
# /bin/echo 'model =  coremltools.models.MLModel("'"$name"'")'

# Make predictions
# /bin/echo 'predictions = model.predict({"bedroom": 1.0, "bath": 1.0, "size": 1240})'

# red_bias = {'image1': -100, 'image2': -110},
#        ...                     green_bias = {'image1': -90, 'image2': -125},
#        ...                     blue_bias = {'image1': -105, 'image2': -120},
#        ...                     image_input_names = ['image1', 'image2'])
