#!/bin/csh -fb

onintr cleanup

if ($#argv > 0) then
  set vendor = $argv[1]
else
  echo -n "$0 <vendor> (default all):"
  set vendor = $<
  if ($#vendor == 0 || $vendor == "") then
    set vendor = "all"
  endif
endif
echo "$0 - using vendor ($vendor)" >&! /dev/stderr

if ($#argv > 1) then
  set net = $argv[2]
else
  echo -n "$0 $vendor <net> (default 192.168.1.0/24):"
  set net = $<
  if ($#net == 0 || $net == "") then
    set net = "192.168.1.0/24"
  endif
endif
echo "$0 - using net ($net)" >&! /dev/stderr

# find hosts on the LAN
set out = "/tmp/$0:t.$$.txt"
if (! -e "/usr/bin/nmap") then
  /bin/echo 'No nmap(8); install using brew or apt' >& /dev/stderr
  exit
endif
/usr/bin/sudo /usr/bin/nmap -sn -T5 "$net" >! "$out"

if (! -e "$out") then
  /bin/echo 'No nmap(8) output for '"$net" >& /dev/stderr
  exit
endif

if ($vendor == "all") then
  set vendors = ( `/bin/cat "$out" | /usr/bin/awk '/Nmap scan report for/ { printf("%s ", $5) ; getline; getline; printf("%s %s\n", $3, $4)}' | /usr/bin/awk '{ print $3 }' | /bin/egrep "^\(" | /bin/sed 's/(//g' | /bin/sed 's/)//g' | /usr/bin/sort | /usr/bin/uniq` )
endif

set names = ( \
    wcv80n_woodshed \
    wcv80n_livingroom \
    wcv80n_poolhouse_fridge \
    wcv80n_interior_gate \
    wcv80n_kitchen \
    wcv80n_poolhouse_exterior \
    wcv80n_dogyard \
    wcv80n_dogshedmiddle \
    wcv80n_dogshedfront \
    wcv80n_dogshed_interior \
    wcv80n_pondview \
    wcv80n_gravelpad \
    wcv80n_upperpath \
    wcv80n_laundry \
    wcv80n_foyer \
    wcv80n_frontwalk \
    wcv80n_dogpond \
    wcv80n_poolhousestereo \
    wcv80n_diningroom \
    wcv80n_backyard \
  )

if ($?vendors == 0) then
  set vendors = ( $vendor )
endif

set config = "auto-config-$vendor.yaml"
set host = "auto-host-$vendor.yaml"
set sensor = "auto-sensor-$vendor.yaml"
set automa = "auto-automa-$vendor.yaml"

rm -f "$config" "$host" "$sensor" "$automa"

/bin/echo '++ Processing '$#vendors' vendors' >& /dev/stderr

# start automation
/bin/echo 'automation notify_host_status:' >>! "$automa"
/bin/echo '  - alias: Notify Device Status' >>! "$automa"
/bin/echo '    trigger:' >>! "$automa"
/bin/echo '      platform: state' >>! "$automa"
/bin/echo '      entity_id:' >>! "$automa"

@ total = 0

foreach vendor ( $vendors )

  set ips = ( `/bin/cat "$out" | /usr/bin/awk '/Nmap scan report for/ { printf("%s ", $5) ; getline; getline; printf("%s %s\n", $3, $4)}' | egrep "$vendor" | /usr/bin/awk '{ print $1 }'` )
  set macs = ( `/bin/cat "$out" | /usr/bin/awk '/Nmap scan report for/ { printf("%s ", $5) ; getline; getline; printf("%s %s\n", $3, $4)}' | egrep "$vendor" | /usr/bin/awk '{ print $2 }'` )

  /bin/echo '---- Vendor: '"$vendor"' ('"$#ips"')' >& /dev/stderr

  @ i = 1
  while ($i <= $#ips)
    set ip = "$ips[$i]"
    set mac = "$macs[$i]"

    set name = ( `/bin/echo "$vendor" "$i" | /usr/bin/awk '{ printf("%s_%04d", $1, $2) }'` )

    switch ($vendor)
      case "camera":
      case "Cisco-Linksys":
        set name = "$names[$i]"
        /bin/echo '# '"$name"' '"$ip"' '"$mac" >>! "$config"
        /bin/echo 'camera '"$name"':' >>! "$config"
        /bin/echo '  - platform: mjpeg' >>! "$config"
        /bin/echo '    mjpeg_url: http://'"$ip"'/img/video.mjpeg' >>! "$config"
        /bin/echo '    still_image_url: http://'"$ip"'/img/snapshot.cgi' >>! "$config"
        /bin/echo '    name: '"$name" >>! "$config"
        /bin/echo '    username: \!secret wcv80n_username' >>! "$config"
        /bin/echo '    password: \!secret wcv80n_password' >>! "$config"
        /bin/echo '' >>! "$config"
        breaksw
      default:
        breaksw
    endsw

    # define sensor for on/off-line host status
    /bin/echo '# '"$name"' '"$ip"' '"$mac" >>! "$sensor"
    /bin/echo 'sensor '"$name"_onoff':' >>! "$sensor"
    /bin/echo '  - platform: template' >>! "$sensor"
    /bin/echo '    sensors:' >>! "$sensor"
    /bin/echo '      host_'"$name"'_onoff:' >>! "$sensor"
    /bin/echo '        friendly_name: "'"$name"' OnOff"' >>! "$sensor"
    /bin/echo '        value_template: "{{ '"'Online' if is_state ( 'host_tracker.""$name""', 'home' ) else 'Offline' }}"'"' >>! "$sensor"
    /bin/echo '' >>! "$sensor"

    # add to automation
    /bin/echo '        - sensor.host_'"$name"'_onoff' >>! "$automa"

    # handle host
    /bin/echo '# '"$name"' '"$ip"' '"$mac" >>! "$host"
    /bin/echo "$name"':' >>! "$host"
    /bin/echo '  mac: '"$mac" >>! "$host"
    /bin/echo '  name: '"$name" >>! "$host"
    switch ($vendor)
      case "camera":
      case "Cisco-Linksys":
        set icon = "mdi:webcam"
        set picture = "http://www.linksys.com/images/productmt/834045/372.jpg"
        breaksw
      case "Apple":
        set icon = "mdi:tablet-ipad"
        set icon = "mdi:cellphone-iphone"
        set picture = ""
        breaksw
        breaksw
      default:
        set icon = "mdi:network"
        set picture = ""
        breaksw
    endsw 
    /bin/echo '  icon: '"$icon" >>! "$host"
    /bin/echo '  picture: '"$picture" >>! "$host"
    /bin/echo '  track: true' >>! "$host"
    /bin/echo '  hide_if_away: false' >>! "$host"
    /bin/echo '  vendor: '"$vendor" >>! "$host"
    /bin/echo '' >>! "$host"

    @ i++
    @ total++
  end
end

# end automation
/bin/echo '    condition:' >>! "$automa"
/bin/echo '      - condition: template' >>! "$automa"
/bin/echo '        value_template: "{% if trigger.from_state and trigger.to_state %} True {% else %} False {% endif %}"' >>! "$automa"
/bin/echo '    action:' >>! "$automa"
/bin/echo '      - service: script.notify_me' >>! "$automa"
/bin/echo '        data_template:' >>! "$automa"
/bin/echo '          value1: >' >>! "$automa"
/bin/echo '            {% if trigger.to_state.state | lower == "offline" %}' >>! "$automa"
/bin/echo '              {{ trigger.to_state.attributes.friendly_name }} has gone offline!' >>! "$automa"
/bin/echo '            {% else %}' >>! "$automa"
/bin/echo '              {{ trigger.to_state.attributes.friendly_name }} has come online!' >>! "$automa"
/bin/echo '            {% endif %}' >>! "$automa"
/bin/echo '' >>! "$automa"

cleanup:

/bin/rm -f "$out"

/bin/echo '++ Produced YAML for '"$total"' hosts: '"$config"' & '"$host" >& /dev/stderr
